// Mocks generated by Mockito 5.4.2 from annotations
// in sbb_oidc/test/oidc_client_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i6;

import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sbb_oidc_platform_interface/sbb_oidc_platform_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJsonWebToken_0 extends _i1.SmartFake implements _i2.JsonWebToken {
  _FakeJsonWebToken_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOidcToken_3 extends _i1.SmartFake implements _i2.OidcToken {
  _FakeOidcToken_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccessToken_4 extends _i1.SmartFake implements _i2.AccessToken {
  _FakeAccessToken_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccessToken].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockAccessToken extends _i1.Mock implements _i2.AccessToken {
  @override
  String get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  bool get isJsonWebToken => (super.noSuchMethod(
        Invocation.getter(#isJsonWebToken),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.JsonWebToken toJwt() => (super.noSuchMethod(
        Invocation.method(
          #toJwt,
          [],
        ),
        returnValue: _FakeJsonWebToken_0(
          this,
          Invocation.method(
            #toJwt,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeJsonWebToken_0(
          this,
          Invocation.method(
            #toJwt,
            [],
          ),
        ),
      ) as _i2.JsonWebToken);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  @override
  _i4.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i3.Response>);

  @override
  _i4.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i3.Response>);

  @override
  _i4.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);

  @override
  _i4.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);

  @override
  _i4.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);

  @override
  _i4.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i5.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);

  @override
  _i4.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i6.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
        returnValueForMissingStub:
            _i4.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i4.Future<_i6.Uint8List>);

  @override
  _i4.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i4.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i4.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OidcService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOidcService extends _i1.Mock implements _i2.OidcService {
  @override
  _i4.Future<_i2.OidcToken> login(
    List<String>? scopes,
    _i2.LoginPrompt? prompt,
    String? loginHint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            scopes,
            prompt,
            loginHint,
          ],
        ),
        returnValue: _i4.Future<_i2.OidcToken>.value(_FakeOidcToken_3(
          this,
          Invocation.method(
            #login,
            [
              scopes,
              prompt,
              loginHint,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.OidcToken>.value(_FakeOidcToken_3(
          this,
          Invocation.method(
            #login,
            [
              scopes,
              prompt,
              loginHint,
            ],
          ),
        )),
      ) as _i4.Future<_i2.OidcToken>);

  @override
  _i4.Future<_i2.OidcToken> getToken(
    List<String>? scopes,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [
            scopes,
            forceRefresh,
          ],
        ),
        returnValue: _i4.Future<_i2.OidcToken>.value(_FakeOidcToken_3(
          this,
          Invocation.method(
            #getToken,
            [
              scopes,
              forceRefresh,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.OidcToken>.value(_FakeOidcToken_3(
          this,
          Invocation.method(
            #getToken,
            [
              scopes,
              forceRefresh,
            ],
          ),
        )),
      ) as _i4.Future<_i2.OidcToken>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> endSession() => (super.noSuchMethod(
        Invocation.method(
          #endSession,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [OidcToken].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockOidcToken extends _i1.Mock implements _i2.OidcToken {
  @override
  String get tokenType => (super.noSuchMethod(
        Invocation.getter(#tokenType),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  _i2.AccessToken get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _FakeAccessToken_4(
          this,
          Invocation.getter(#accessToken),
        ),
        returnValueForMissingStub: _FakeAccessToken_4(
          this,
          Invocation.getter(#accessToken),
        ),
      ) as _i2.AccessToken);

  @override
  _i2.JsonWebToken get idToken => (super.noSuchMethod(
        Invocation.getter(#idToken),
        returnValue: _FakeJsonWebToken_0(
          this,
          Invocation.getter(#idToken),
        ),
        returnValueForMissingStub: _FakeJsonWebToken_0(
          this,
          Invocation.getter(#idToken),
        ),
      ) as _i2.JsonWebToken);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String toJsonString({bool? pretty = false}) => (super.noSuchMethod(
        Invocation.method(
          #toJsonString,
          [],
          {#pretty: pretty},
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [OpenIDProviderMetadata].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockOpenIDProviderMetadata extends _i1.Mock
    implements _i2.OpenIDProviderMetadata {
  @override
  String get authorizationEndpoint => (super.noSuchMethod(
        Invocation.getter(#authorizationEndpoint),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  List<String> get claimsSupported => (super.noSuchMethod(
        Invocation.getter(#claimsSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  String get cloudGraphHostName => (super.noSuchMethod(
        Invocation.getter(#cloudGraphHostName),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get cloudInstanceName => (super.noSuchMethod(
        Invocation.getter(#cloudInstanceName),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get deviceAuthorizationEndpoint => (super.noSuchMethod(
        Invocation.getter(#deviceAuthorizationEndpoint),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get endSessionEndpoint => (super.noSuchMethod(
        Invocation.getter(#endSessionEndpoint),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  bool get frontchannelLogoutSupported => (super.noSuchMethod(
        Invocation.getter(#frontchannelLogoutSupported),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get httpLogoutSupported => (super.noSuchMethod(
        Invocation.getter(#httpLogoutSupported),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String> get idTokenSigningAlgValuesSupported => (super.noSuchMethod(
        Invocation.getter(#idTokenSigningAlgValuesSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  String get issuer => (super.noSuchMethod(
        Invocation.getter(#issuer),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get jwksUri => (super.noSuchMethod(
        Invocation.getter(#jwksUri),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get kerberosEndpoint => (super.noSuchMethod(
        Invocation.getter(#kerberosEndpoint),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get msgraphHost => (super.noSuchMethod(
        Invocation.getter(#msgraphHost),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  String get rbacUrl => (super.noSuchMethod(
        Invocation.getter(#rbacUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  bool get requestUriParameterSupported => (super.noSuchMethod(
        Invocation.getter(#requestUriParameterSupported),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String> get responseModesSupported => (super.noSuchMethod(
        Invocation.getter(#responseModesSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  List<String> get responseTypesSupported => (super.noSuchMethod(
        Invocation.getter(#responseTypesSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  List<String> get scopesSupported => (super.noSuchMethod(
        Invocation.getter(#scopesSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  List<String> get subjectTypesSupported => (super.noSuchMethod(
        Invocation.getter(#subjectTypesSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  String get tokenEndpoint => (super.noSuchMethod(
        Invocation.getter(#tokenEndpoint),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  List<String> get tokenEndpointAuthMethodsSupported => (super.noSuchMethod(
        Invocation.getter(#tokenEndpointAuthMethodsSupported),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  String get userinfoEndpoint => (super.noSuchMethod(
        Invocation.getter(#userinfoEndpoint),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String toJsonString({bool? pretty = false}) => (super.noSuchMethod(
        Invocation.method(
          #toJsonString,
          [],
          {#pretty: pretty},
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}
